// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: greet.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace gRPC.Server {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Crypto_Server
  {
    static readonly string __ServiceName = "greet.Crypto_Server";

    static readonly grpc::Marshaller<global::gRPC.Server.HelloRequest> __Marshaller_greet_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.HelloRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.HelloReply> __Marshaller_greet_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.HelloReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.FileBuffer> __Marshaller_greet_FileBuffer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.FileBuffer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.IsWritten> __Marshaller_greet_IsWritten = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.IsWritten.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.WhatFile> __Marshaller_greet_WhatFile = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.WhatFile.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.UserList> __Marshaller_greet_UserList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.UserList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.FileList> __Marshaller_greet_FileList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.FileList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::gRPC.Server.ClearAll> __Marshaller_greet_ClearAll = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::gRPC.Server.ClearAll.Parser.ParseFrom);

    static readonly grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply> __Method_SayHello = new grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_HelloReply);

    static readonly grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply> __Method_SayBye = new grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayBye",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_HelloReply);

    static readonly grpc::Method<global::gRPC.Server.FileBuffer, global::gRPC.Server.IsWritten> __Method_SendFile = new grpc::Method<global::gRPC.Server.FileBuffer, global::gRPC.Server.IsWritten>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendFile",
        __Marshaller_greet_FileBuffer,
        __Marshaller_greet_IsWritten);

    static readonly grpc::Method<global::gRPC.Server.WhatFile, global::gRPC.Server.FileBuffer> __Method_TakeFile = new grpc::Method<global::gRPC.Server.WhatFile, global::gRPC.Server.FileBuffer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TakeFile",
        __Marshaller_greet_WhatFile,
        __Marshaller_greet_FileBuffer);

    static readonly grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.UserList> __Method_WhoAtServer = new grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.UserList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WhoAtServer",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_UserList);

    static readonly grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.FileList> __Method_TakeAllFileNames = new grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.FileList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TakeAllFileNames",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_FileList);

    static readonly grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.ClearAll> __Method_ClearDir = new grpc::Method<global::gRPC.Server.HelloRequest, global::gRPC.Server.ClearAll>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearDir",
        __Marshaller_greet_HelloRequest,
        __Marshaller_greet_ClearAll);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gRPC.Server.GreetReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Crypto_Server</summary>
    [grpc::BindServiceMethod(typeof(Crypto_Server), "BindService")]
    public abstract partial class Crypto_ServerBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.HelloReply> SayHello(global::gRPC.Server.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.HelloReply> SayBye(global::gRPC.Server.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.IsWritten> SendFile(global::gRPC.Server.FileBuffer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.FileBuffer> TakeFile(global::gRPC.Server.WhatFile request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.UserList> WhoAtServer(global::gRPC.Server.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.FileList> TakeAllFileNames(global::gRPC.Server.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::gRPC.Server.ClearAll> ClearDir(global::gRPC.Server.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(Crypto_ServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_SayBye, serviceImpl.SayBye)
          .AddMethod(__Method_SendFile, serviceImpl.SendFile)
          .AddMethod(__Method_TakeFile, serviceImpl.TakeFile)
          .AddMethod(__Method_WhoAtServer, serviceImpl.WhoAtServer)
          .AddMethod(__Method_TakeAllFileNames, serviceImpl.TakeAllFileNames)
          .AddMethod(__Method_ClearDir, serviceImpl.ClearDir).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, Crypto_ServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_SayBye, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.HelloRequest, global::gRPC.Server.HelloReply>(serviceImpl.SayBye));
      serviceBinder.AddMethod(__Method_SendFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.FileBuffer, global::gRPC.Server.IsWritten>(serviceImpl.SendFile));
      serviceBinder.AddMethod(__Method_TakeFile, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.WhatFile, global::gRPC.Server.FileBuffer>(serviceImpl.TakeFile));
      serviceBinder.AddMethod(__Method_WhoAtServer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.HelloRequest, global::gRPC.Server.UserList>(serviceImpl.WhoAtServer));
      serviceBinder.AddMethod(__Method_TakeAllFileNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.HelloRequest, global::gRPC.Server.FileList>(serviceImpl.TakeAllFileNames));
      serviceBinder.AddMethod(__Method_ClearDir, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gRPC.Server.HelloRequest, global::gRPC.Server.ClearAll>(serviceImpl.ClearDir));
    }

  }
}
#endregion
